lua_shared_dict my_limit_req_store 100m;
lua_package_path "/etc/nginx/conf.d/?.lua;;";

server {
    listen 80;
    location = /graphql {
        access_by_lua_block {
                -- RATE LIMITER --
                local limit_req = require "resty.limit.req"

                -- Allow .5 requests per second --
                local lim, err = limit_req.new("my_limit_req_store", .5, .5)
                if not lim then
                    ngx.log(ngx.ERR, "failed to instantiate a resty.limit.req object: ", err)
                    return ngx.exit(500)
                end

                -- Use the visitors IP addres as a key --
                local key = ngx.var.http_fly_client_ip
                local delay, err = lim:incoming(key, true)

                -- Throw an error when the limit is reached --
                if err == "rejected" then
                    ngx.log(ngx.ERR, "Limit reached: ", err)
                    return ngx.exit(503)
                end
            }
        set_by_lua $token 'return os.getenv("DGRAPH_KEY")';
        proxy_pass https://patient-paper.us-west-2.aws.cloud.dgraph.io/graphql;
        proxy_set_header DG-Auth $token;
        proxy_ssl_server_name on;
    }
}
